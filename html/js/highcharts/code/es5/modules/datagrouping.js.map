{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v12.1.2 (2025-01-09)\n * @module highcharts/modules/datagrouping\n * @requires highcharts\n *\n * Data grouping module\n *\n * (c) 2010-2024 Torstein HÃ¸nsi\n *\n * License: www.highcharts.com/license\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"highcharts\"), require(\"highcharts\")[\"SeriesRegistry\"], require(\"highcharts\")[\"Templating\"]);\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"highcharts/modules/datagrouping\", [[\"highcharts/highcharts\"], [\"highcharts/highcharts\",\"SeriesRegistry\"], [\"highcharts/highcharts\",\"Templating\"]], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"highcharts/modules/datagrouping\"] = factory(require(\"highcharts\"), require(\"highcharts\")[\"SeriesRegistry\"], require(\"highcharts\")[\"Templating\"]);\n\telse\n\t\troot[\"Highcharts\"] = factory(root[\"Highcharts\"], root[\"Highcharts\"][\"SeriesRegistry\"], root[\"Highcharts\"][\"Templating\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__944__, __WEBPACK_EXTERNAL_MODULE__512__, __WEBPACK_EXTERNAL_MODULE__984__) {\nreturn /******/ (function() { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ 512:\n/***/ (function(module) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__512__;\n\n/***/ }),\n\n/***/ 984:\n/***/ (function(module) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__984__;\n\n/***/ }),\n\n/***/ 944:\n/***/ (function(module) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__944__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t!function() {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__webpack_require__.n = function(module) {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\tfunction() { return module['default']; } :\n/******/ \t\t\t\tfunction() { return module; };\n/******/ \t\t\t__webpack_require__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t}();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t!function() {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__webpack_require__.d = function(exports, definition) {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t}();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t!function() {\n/******/ \t\t__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }\n/******/ \t}();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = {};\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": function() { return /* binding */ datagrouping_src; }\n});\n\n// EXTERNAL MODULE: external {\"amd\":[\"highcharts/highcharts\"],\"commonjs\":[\"highcharts\"],\"commonjs2\":[\"highcharts\"],\"root\":[\"Highcharts\"]}\nvar highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_ = __webpack_require__(944);\nvar highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default = /*#__PURE__*/__webpack_require__.n(highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_);\n;// ./code/es5/es-modules/Extensions/DataGrouping/ApproximationRegistry.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  Constants\n *\n * */\n/**\n * Define the available approximation types. The data grouping\n * approximations takes an array or numbers as the first parameter. In case\n * of ohlc, four arrays are sent in as four parameters. Each array consists\n * only of numbers. In case null values belong to the group, the property\n * .hasNulls will be set to true on the array.\n *\n * @product highstock\n *\n * @private\n */\nvar ApproximationRegistry = {\n// Approximations added programmatically\n};\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ var DataGrouping_ApproximationRegistry = (ApproximationRegistry);\n\n;// ./code/es5/es-modules/Extensions/DataGrouping/ApproximationDefaults.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nvar arrayMax = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).arrayMax, arrayMin = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).arrayMin, correctFloat = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).correctFloat, extend = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).extend, isNumber = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).isNumber;\n/* *\n *\n *  Functions\n *\n * */\n/**\n * @private\n */\nfunction average(arr) {\n    var len = arr.length;\n    var ret = sum(arr);\n    // If we have a number, return it divided by the length. If not,\n    // return null or undefined based on what the sum method finds.\n    if (isNumber(ret) && len) {\n        ret = correctFloat(ret / len);\n    }\n    return ret;\n}\n/**\n * The same as average, but for series with multiple values, like area ranges.\n * @private\n */\nfunction averages() {\n    var ret = [];\n    [].forEach.call(arguments, function (arr) {\n        ret.push(average(arr));\n    });\n    // Return undefined when first elem. is undefined and let\n    // sum method handle null (#7377)\n    return typeof ret[0] === 'undefined' ? void 0 : ret;\n}\n/**\n * @private\n */\nfunction ApproximationDefaults_close(arr) {\n    return arr.length ?\n        arr[arr.length - 1] :\n        (arr.hasNulls ? null : void 0);\n}\n/**\n * @private\n */\nfunction high(arr) {\n    return arr.length ?\n        arrayMax(arr) :\n        (arr.hasNulls ? null : void 0);\n}\n/**\n * HLC, OHLC and range are special cases where a multidimensional array is input\n * and an array is output.\n * @private\n */\nfunction hlc(high, low, close) {\n    high = DataGrouping_ApproximationRegistry.high(high);\n    low = DataGrouping_ApproximationRegistry.low(low);\n    close = DataGrouping_ApproximationRegistry.close(close);\n    if (isNumber(high) ||\n        isNumber(low) ||\n        isNumber(close)) {\n        return [high, low, close];\n    }\n}\n/**\n * @private\n */\nfunction low(arr) {\n    return arr.length ?\n        arrayMin(arr) :\n        (arr.hasNulls ? null : void 0);\n}\n/**\n * @private\n */\nfunction ohlc(open, high, low, close) {\n    open = DataGrouping_ApproximationRegistry.open(open);\n    high = DataGrouping_ApproximationRegistry.high(high);\n    low = DataGrouping_ApproximationRegistry.low(low);\n    close = DataGrouping_ApproximationRegistry.close(close);\n    if (isNumber(open) ||\n        isNumber(high) ||\n        isNumber(low) ||\n        isNumber(close)) {\n        return [open, high, low, close];\n    }\n}\n/**\n * @private\n */\nfunction ApproximationDefaults_open(arr) {\n    return arr.length ? arr[0] : (arr.hasNulls ? null : void 0);\n}\n/**\n * @private\n */\nfunction range(low, high) {\n    low = DataGrouping_ApproximationRegistry.low(low);\n    high = DataGrouping_ApproximationRegistry.high(high);\n    if (isNumber(low) || isNumber(high)) {\n        return [low, high];\n    }\n    if (low === null && high === null) {\n        return null;\n    }\n    // Else, return is undefined\n}\n/**\n * @private\n */\nfunction sum(arr) {\n    var len = arr.length,\n        ret;\n    // 1. it consists of nulls exclusive\n    if (!len && arr.hasNulls) {\n        ret = null;\n        // 2. it has a length and real values\n    }\n    else if (len) {\n        ret = 0;\n        while (len--) {\n            ret += arr[len];\n        }\n    }\n    // 3. it has zero length, so just return undefined\n    // => doNothing()\n    return ret;\n}\n/* *\n *\n *  Default Export\n *\n * */\nvar ApproximationDefaults = {\n    average: average,\n    averages: averages,\n    close: ApproximationDefaults_close,\n    high: high,\n    hlc: hlc,\n    low: low,\n    ohlc: ohlc,\n    open: ApproximationDefaults_open,\n    range: range,\n    sum: sum\n};\nextend(DataGrouping_ApproximationRegistry, ApproximationDefaults);\n/* harmony default export */ var DataGrouping_ApproximationDefaults = (ApproximationDefaults);\n\n;// ./code/es5/es-modules/Extensions/DataGrouping/DataGroupingDefaults.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  Constants\n *\n * */\n/**\n * Common options\n * @private\n */\nvar common = {\n    /// enabled: null, // (true for stock charts, false for basic),\n    // forced: undefined,\n    groupPixelWidth: 2,\n    // The first one is the point or start value, the second is the start\n    // value if we're dealing with range, the third one is the end value if\n    // dealing with a range\n    dateTimeLabelFormats: {\n        millisecond: [\n            '%[AebHMSL]',\n            '%[AebHMSL]',\n            '-%[HMSL]'\n        ],\n        second: [\n            '%[AebHMS]',\n            '%[AebHMS]',\n            '-%[HMS]'\n        ],\n        minute: [\n            '%[AebHM]',\n            '%[AebHM]',\n            '-%[HM]'\n        ],\n        hour: [\n            '%[AebHM]',\n            '%[AebHM]',\n            '-%[HM]'\n        ],\n        day: [\n            '%[AebY]',\n            '%[Aeb]',\n            '-%[AebY]'\n        ],\n        week: [\n            'week from %[AebY]',\n            '%[Aeb]',\n            '-%[AebY]'\n        ],\n        month: [\n            '%[BY]',\n            '%[B]',\n            '-%[BY]'\n        ],\n        year: [\n            '%Y',\n            '%Y',\n            '-%Y'\n        ]\n    }\n    /// smoothed = false, // enable this for navigator series only\n};\n/**\n * Extends common options\n * @private\n */\nvar seriesSpecific = {\n    line: {},\n    spline: {},\n    area: {},\n    areaspline: {},\n    arearange: {},\n    column: {\n        groupPixelWidth: 10\n    },\n    columnrange: {\n        groupPixelWidth: 10\n    },\n    candlestick: {\n        groupPixelWidth: 10\n    },\n    ohlc: {\n        groupPixelWidth: 5\n    },\n    hlc: {\n        groupPixelWidth: 5\n        // Move to HeikinAshiSeries.ts after refactoring data grouping.\n    },\n    heikinashi: {\n        groupPixelWidth: 10\n    }\n};\n/**\n * Units are defined in a separate array to allow complete overriding in\n * case of a user option.\n * @private\n */\nvar units = [\n    [\n        'millisecond', // Unit name\n        [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // Allowed multiples\n    ], [\n        'second',\n        [1, 2, 5, 10, 15, 30]\n    ], [\n        'minute',\n        [1, 2, 5, 10, 15, 30]\n    ], [\n        'hour',\n        [1, 2, 3, 4, 6, 8, 12]\n    ], [\n        'day',\n        [1]\n    ], [\n        'week',\n        [1]\n    ], [\n        'month',\n        [1, 3, 6]\n    ], [\n        'year',\n        null\n    ]\n];\n/* *\n *\n *  Default Export\n *\n * */\nvar DataGroupingDefaults = {\n    common: common,\n    seriesSpecific: seriesSpecific,\n    units: units\n};\n/* harmony default export */ var DataGrouping_DataGroupingDefaults = (DataGroupingDefaults);\n\n;// ./code/es5/es-modules/Extensions/DataGrouping/DataGroupingAxisComposition.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nvar addEvent = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).addEvent, DataGroupingAxisComposition_extend = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).extend, merge = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).merge, pick = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).pick;\n/* *\n *\n *  Variables\n *\n * */\nvar AxisConstructor;\n/* *\n *\n *  Functions\n *\n * */\n/**\n * Check the groupPixelWidth and apply the grouping if needed.\n * Fired only after processing the data.\n *\n * @product highstock\n *\n * @function Highcharts.Axis#applyGrouping\n */\nfunction applyGrouping(e) {\n    var axis = this,\n        series = axis.series;\n    // Reset the groupPixelWidth for all series, #17141.\n    series.forEach(function (series) {\n        series.groupPixelWidth = void 0; // #2110\n    });\n    series.forEach(function (series) {\n        series.groupPixelWidth = (axis.getGroupPixelWidth &&\n            axis.getGroupPixelWidth());\n        if (series.groupPixelWidth) {\n            series.hasProcessed = true; // #2692\n        }\n        // Fire independing on series.groupPixelWidth to always set a proper\n        // dataGrouping state, (#16238)\n        series.applyGrouping(!!e.hasExtremesChanged);\n    });\n}\n/**\n * @private\n */\nfunction compose(AxisClass) {\n    AxisConstructor = AxisClass;\n    var axisProto = AxisClass.prototype;\n    if (!axisProto.applyGrouping) {\n        addEvent(AxisClass, 'afterSetScale', onAfterSetScale);\n        // When all series are processed, calculate the group pixel width and\n        // then if this value is different than zero apply groupings.\n        addEvent(AxisClass, 'postProcessData', applyGrouping);\n        DataGroupingAxisComposition_extend(axisProto, {\n            applyGrouping: applyGrouping,\n            getGroupPixelWidth: getGroupPixelWidth,\n            setDataGrouping: setDataGrouping\n        });\n    }\n}\n/**\n * Get the data grouping pixel width based on the greatest defined individual\n * width of the axis' series, and if whether one of the axes need grouping.\n * @private\n */\nfunction getGroupPixelWidth() {\n    var series = this.series;\n    var i = series.length,\n        groupPixelWidth = 0,\n        doGrouping = false,\n        dataLength,\n        dgOptions;\n    // If one of the series needs grouping, apply it to all (#1634)\n    while (i--) {\n        dgOptions = series[i].options.dataGrouping;\n        if (dgOptions) { // #2692\n            // If multiple series are compared on the same x axis, give them the\n            // same group pixel width (#334)\n            groupPixelWidth = Math.max(groupPixelWidth, \n            // Fallback to commonOptions (#9693)\n            pick(dgOptions.groupPixelWidth, DataGrouping_DataGroupingDefaults.common.groupPixelWidth));\n            dataLength = (series[i].dataTable.modified ||\n                series[i].dataTable).rowCount;\n            // Execute grouping if the amount of points is greater than the\n            // limit defined in groupPixelWidth\n            if (series[i].groupPixelWidth ||\n                (dataLength >\n                    (this.chart.plotSizeX / groupPixelWidth)) ||\n                (dataLength && dgOptions.forced)) {\n                doGrouping = true;\n            }\n        }\n    }\n    return doGrouping ? groupPixelWidth : 0;\n}\n/**\n * When resetting the scale reset the hasProcessed flag to avoid taking\n * previous data grouping of neighbour series into account when determining\n * group pixel width (#2692).\n * @private\n */\nfunction onAfterSetScale() {\n    this.series.forEach(function (series) {\n        series.hasProcessed = false;\n    });\n}\n/**\n * Highcharts Stock only. Force data grouping on all the axis' series.\n *\n * @product highstock\n *\n * @function Highcharts.Axis#setDataGrouping\n *\n * @param {boolean|Highcharts.DataGroupingOptionsObject} [dataGrouping]\n *        A `dataGrouping` configuration. Use `false` to disable data grouping\n *        dynamically.\n *\n * @param {boolean} [redraw=true]\n *        Whether to redraw the chart or wait for a later call to\n *        {@link Chart#redraw}.\n */\nfunction setDataGrouping(dataGrouping, redraw) {\n    var axis = this;\n    var i;\n    redraw = pick(redraw, true);\n    if (!dataGrouping) {\n        dataGrouping = {\n            forced: false,\n            units: null\n        };\n    }\n    // Axis is instantiated, update all series\n    if (this instanceof AxisConstructor) {\n        i = this.series.length;\n        while (i--) {\n            this.series[i].update({\n                dataGrouping: dataGrouping\n            }, false);\n        }\n        // Axis not yet instantiated, alter series options\n    }\n    else {\n        this.chart.options.series.forEach(function (seriesOptions) {\n            // Merging dataGrouping options with already defined options #16759\n            seriesOptions.dataGrouping = typeof dataGrouping === 'boolean' ?\n                dataGrouping :\n                merge(dataGrouping, seriesOptions.dataGrouping);\n        });\n    }\n    // Clear ordinal slope, so we won't accidentally use the old one (#7827)\n    if (axis.ordinal) {\n        axis.ordinal.slope = void 0;\n    }\n    if (redraw) {\n        this.chart.redraw();\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\nvar DataGroupingAxisComposition = {\n    compose: compose\n};\n/* harmony default export */ var DataGrouping_DataGroupingAxisComposition = (DataGroupingAxisComposition);\n\n;// ./code/es5/es-modules/Data/DataTableCore.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Sophie Bremer\n *  - GÃ¸ran Slettemark\n *  - Torstein HÃ¸nsi\n *\n * */\n\n\nvar fireEvent = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).fireEvent, isArray = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).isArray, objectEach = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).objectEach, uniqueKey = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).uniqueKey;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Class to manage columns and rows in a table structure. It provides methods\n * to add, remove, and manipulate columns and rows, as well as to retrieve data\n * from specific cells.\n *\n * @class\n * @name Highcharts.DataTable\n *\n * @param {Highcharts.DataTableOptions} [options]\n * Options to initialize the new DataTable instance.\n */\nvar DataTableCore = /** @class */ (function () {\n    /**\n     * Constructs an instance of the DataTable class.\n     *\n     * @example\n     * const dataTable = new Highcharts.DataTableCore({\n     *   columns: {\n     *     year: [2020, 2021, 2022, 2023],\n     *     cost: [11, 13, 12, 14],\n     *     revenue: [12, 15, 14, 18]\n     *   }\n     * });\n\n     *\n     * @param {Highcharts.DataTableOptions} [options]\n     * Options to initialize the new DataTable instance.\n     */\n    function DataTableCore(options) {\n        if (options === void 0) { options = {}; }\n        var _this = this;\n        /**\n         * Whether the ID was automatic generated or given in the constructor.\n         *\n         * @name Highcharts.DataTable#autoId\n         * @type {boolean}\n         */\n        this.autoId = !options.id;\n        this.columns = {};\n        /**\n         * ID of the table for indentification purposes.\n         *\n         * @name Highcharts.DataTable#id\n         * @type {string}\n         */\n        this.id = (options.id || uniqueKey());\n        this.modified = this;\n        this.rowCount = 0;\n        this.versionTag = uniqueKey();\n        var rowCount = 0;\n        objectEach(options.columns || {}, function (column, columnName) {\n            _this.columns[columnName] = column.slice();\n            rowCount = Math.max(rowCount, column.length);\n        });\n        this.applyRowCount(rowCount);\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Applies a row count to the table by setting the `rowCount` property and\n     * adjusting the length of all columns.\n     *\n     * @private\n     * @param {number} rowCount The new row count.\n     */\n    DataTableCore.prototype.applyRowCount = function (rowCount) {\n        this.rowCount = rowCount;\n        objectEach(this.columns, function (column) {\n            if (isArray(column)) { // Not on typed array\n                column.length = rowCount;\n            }\n        });\n    };\n    /**\n     * Fetches the given column by the canonical column name. Simplified version\n     * of the full `DataTable.getRow` method, always returning by reference.\n     *\n     * @param {string} columnName\n     * Name of the column to get.\n     *\n     * @return {Highcharts.DataTableColumn|undefined}\n     * A copy of the column, or `undefined` if not found.\n     */\n    DataTableCore.prototype.getColumn = function (columnName, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    asReference) {\n        return this.columns[columnName];\n    };\n    /**\n     * Retrieves all or the given columns. Simplified version of the full\n     * `DataTable.getColumns` method, always returning by reference.\n     *\n     * @param {Array<string>} [columnNames]\n     * Column names to retrieve.\n     *\n     * @return {Highcharts.DataTableColumnCollection}\n     * Collection of columns. If a requested column was not found, it is\n     * `undefined`.\n     */\n    DataTableCore.prototype.getColumns = function (columnNames, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    asReference) {\n        var _this = this;\n        return (columnNames || Object.keys(this.columns)).reduce(function (columns, columnName) {\n            columns[columnName] = _this.columns[columnName];\n            return columns;\n        }, {});\n    };\n    /**\n     * Retrieves the row at a given index.\n     *\n     * @param {number} rowIndex\n     * Row index to retrieve. First row has index 0.\n     *\n     * @param {Array<string>} [columnNames]\n     * Column names to retrieve.\n     *\n     * @return {Record<string, number|string|undefined>|undefined}\n     * Returns the row values, or `undefined` if not found.\n     */\n    DataTableCore.prototype.getRow = function (rowIndex, columnNames) {\n        var _this = this;\n        return (columnNames || Object.keys(this.columns)).map(function (key) { var _a; return (_a = _this.columns[key]) === null || _a === void 0 ? void 0 : _a[rowIndex]; });\n    };\n    /**\n     * Sets cell values for a column. Will insert a new column, if not found.\n     *\n     * @param {string} columnName\n     * Column name to set.\n     *\n     * @param {Highcharts.DataTableColumn} [column]\n     * Values to set in the column.\n     *\n     * @param {number} [rowIndex=0]\n     * Index of the first row to change. (Default: 0)\n     *\n     * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits #setColumns\n     * @emits #afterSetColumns\n     */\n    DataTableCore.prototype.setColumn = function (columnName, column, rowIndex, eventDetail) {\n        var _a;\n        if (column === void 0) { column = []; }\n        if (rowIndex === void 0) { rowIndex = 0; }\n        this.setColumns((_a = {}, _a[columnName] = column, _a), rowIndex, eventDetail);\n    };\n    /**\n     * * Sets cell values for multiple columns. Will insert new columns, if not\n     * found. Simplified version of the full `DataTable.setColumns`, limited to\n     * full replacement of the columns (undefined `rowIndex`).\n     *\n     * @param {Highcharts.DataTableColumnCollection} columns\n     * Columns as a collection, where the keys are the column names.\n     *\n     * @param {number} [rowIndex]\n     * Index of the first row to change. Keep undefined to reset.\n     *\n     * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits #setColumns\n     * @emits #afterSetColumns\n     */\n    DataTableCore.prototype.setColumns = function (columns, rowIndex, eventDetail) {\n        var _this = this;\n        var rowCount = this.rowCount;\n        objectEach(columns, function (column, columnName) {\n            _this.columns[columnName] = column.slice();\n            rowCount = column.length;\n        });\n        this.applyRowCount(rowCount);\n        if (!(eventDetail === null || eventDetail === void 0 ? void 0 : eventDetail.silent)) {\n            fireEvent(this, 'afterSetColumns');\n            this.versionTag = uniqueKey();\n        }\n    };\n    /**\n     * Sets cell values of a row. Will insert a new row if no index was\n     * provided, or if the index is higher than the total number of table rows.\n     * A simplified version of the full `DateTable.setRow`, limited to objects.\n     *\n     * @param {Record<string, number|string|undefined>} row\n     * Cell values to set.\n     *\n     * @param {number} [rowIndex]\n     * Index of the row to set. Leave `undefind` to add as a new row.\n     *\n     * @param {boolean} [insert]\n     * Whether to insert the row at the given index, or to overwrite the row.\n     *\n     * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits #afterSetRows\n     */\n    DataTableCore.prototype.setRow = function (row, rowIndex, insert, eventDetail) {\n        if (rowIndex === void 0) { rowIndex = this.rowCount; }\n        var columns = this.columns,\n            indexRowCount = insert ? this.rowCount + 1 : rowIndex + 1;\n        objectEach(row, function (cellValue, columnName) {\n            var column = columns[columnName] ||\n                    (eventDetail === null || eventDetail === void 0 ? void 0 : eventDetail.addColumns) !== false && new Array(indexRowCount);\n            if (column) {\n                if (insert) {\n                    column.splice(rowIndex, 0, cellValue);\n                }\n                else {\n                    column[rowIndex] = cellValue;\n                }\n                columns[columnName] = column;\n            }\n        });\n        if (indexRowCount > this.rowCount) {\n            this.applyRowCount(indexRowCount);\n        }\n        if (!(eventDetail === null || eventDetail === void 0 ? void 0 : eventDetail.silent)) {\n            fireEvent(this, 'afterSetRows');\n            this.versionTag = uniqueKey();\n        }\n    };\n    return DataTableCore;\n}());\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ var Data_DataTableCore = (DataTableCore);\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * A column of values in a data table.\n * @typedef {Array<boolean|null|number|string|undefined>} Highcharts.DataTableColumn\n */ /**\n* A collection of data table columns defined by a object where the key is the\n* column name and the value is an array of the column values.\n* @typedef {Record<string, Highcharts.DataTableColumn>} Highcharts.DataTableColumnCollection\n*/\n/**\n * Options for the `DataTable` or `DataTableCore` classes.\n * @interface Highcharts.DataTableOptions\n */ /**\n* The column options for the data table. The columns are defined by an object\n* where the key is the column ID and the value is an array of the column\n* values.\n*\n* @name Highcharts.DataTableOptions.columns\n* @type {Highcharts.DataTableColumnCollection|undefined}\n*/ /**\n* Custom ID to identify the new DataTable instance.\n*\n* @name Highcharts.DataTableOptions.id\n* @type {string|undefined}\n*/\n(''); // Keeps doclets above in JS file\n\n;// ./code/es5/es-modules/Core/Axis/DateTimeAxis.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\nvar DateTimeAxis_addEvent = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).addEvent, getMagnitude = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).getMagnitude, normalizeTickInterval = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).normalizeTickInterval, timeUnits = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).timeUnits;\n/* *\n *\n *  Composition\n *\n * */\n/* eslint-disable valid-jsdoc */\nvar DateTimeAxis;\n(function (DateTimeAxis) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Extends axis class with date and time support.\n     * @private\n     */\n    function compose(AxisClass) {\n        if (!AxisClass.keepProps.includes('dateTime')) {\n            AxisClass.keepProps.push('dateTime');\n            var axisProto = AxisClass.prototype;\n            axisProto.getTimeTicks = getTimeTicks;\n            DateTimeAxis_addEvent(AxisClass, 'afterSetType', onAfterSetType);\n        }\n        return AxisClass;\n    }\n    DateTimeAxis.compose = compose;\n    /**\n     * Set the tick positions to a time unit that makes sense, for example\n     * on the first of each month or on every Monday. Return an array with\n     * the time positions. Used in datetime axes as well as for grouping\n     * data on a datetime axis.\n     *\n     * @private\n     * @function Highcharts.Axis#getTimeTicks\n     * @param {Highcharts.TimeNormalizeObject} normalizedInterval\n     * The interval in axis values (ms) and the count.\n     * @param {number} min\n     * The minimum in axis values.\n     * @param {number} max\n     * The maximum in axis values.\n     */\n    function getTimeTicks() {\n        return this.chart.time.getTimeTicks.apply(this.chart.time, arguments);\n    }\n    /**\n     * @private\n     */\n    function onAfterSetType() {\n        if (this.type !== 'datetime') {\n            this.dateTime = void 0;\n            return;\n        }\n        if (!this.dateTime) {\n            this.dateTime = new Additions(this);\n        }\n    }\n    /* *\n     *\n     *  Classes\n     *\n     * */\n    var Additions = /** @class */ (function () {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            function Additions(axis) {\n                this.axis = axis;\n        }\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get a normalized tick interval for dates. Returns a configuration\n         * object with unit range (interval), count and name. Used to prepare\n         * data for `getTimeTicks`. Previously this logic was part of\n         * getTimeTicks, but as `getTimeTicks` now runs of segments in stock\n         * charts, the normalizing logic was extracted in order to prevent it\n         * for running over again for each segment having the same interval.\n         * #662, #697.\n         * @private\n         */\n        Additions.prototype.normalizeTimeTickInterval = function (tickInterval, unitsOption) {\n            var units = (unitsOption || [[\n                        // Unit name\n                        'millisecond',\n                        // Allowed multiples\n                        [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]\n                    ],\n                [\n                        'second',\n                        [1, 2, 5, 10, 15, 30]\n                    ],\n                [\n                        'minute',\n                        [1, 2, 5, 10, 15, 30]\n                    ],\n                [\n                        'hour',\n                        [1, 2, 3, 4, 6, 8, 12]\n                    ],\n                [\n                        'day',\n                        [1, 2]\n                    ],\n                [\n                        'week',\n                        [1, 2]\n                    ],\n                [\n                        'month',\n                        [1, 2, 3, 4, 6]\n                    ],\n                [\n                        'year',\n                        null\n                    ]]);\n            var unit = units[units.length - 1], // Default unit is years\n                interval = timeUnits[unit[0]],\n                multiples = unit[1],\n                i;\n            // Loop through the units to find the one that best fits the\n            // tickInterval\n            for (i = 0; i < units.length; i++) {\n                unit = units[i];\n                interval = timeUnits[unit[0]];\n                multiples = unit[1];\n                if (units[i + 1]) {\n                    // `lessThan` is in the middle between the highest multiple\n                    // and the next unit.\n                    var lessThan = (interval *\n                            multiples[multiples.length - 1] +\n                            timeUnits[units[i + 1][0]]) / 2;\n                    // Break and keep the current unit\n                    if (tickInterval <= lessThan) {\n                        break;\n                    }\n                }\n            }\n            // Prevent 2.5 years intervals, though 25, 250 etc. are allowed\n            if (interval === timeUnits.year && tickInterval < 5 * interval) {\n                multiples = [1, 2, 5];\n            }\n            // Get the count\n            var count = normalizeTickInterval(tickInterval / interval, multiples, unit[0] === 'year' ? // #1913, #2360\n                    Math.max(getMagnitude(tickInterval / interval), 1) :\n                    1);\n            return {\n                unitRange: interval,\n                count: count,\n                unitName: unit[0]\n            };\n        };\n        /**\n         * Get the best date format for a specific X value based on the closest\n         * point range on the axis.\n         *\n         * @private\n         */\n        Additions.prototype.getXDateFormat = function (x, dateTimeLabelFormats) {\n            var axis = this.axis,\n                time = axis.chart.time;\n            return axis.closestPointRange ?\n                time.getDateFormat(axis.closestPointRange, x, axis.options.startOfWeek, dateTimeLabelFormats) ||\n                    // #2546, 2581\n                    time.resolveDTLFormat(dateTimeLabelFormats.year).main :\n                time.resolveDTLFormat(dateTimeLabelFormats.day).main;\n        };\n        return Additions;\n    }());\n    DateTimeAxis.Additions = Additions;\n})(DateTimeAxis || (DateTimeAxis = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ var Axis_DateTimeAxis = (DateTimeAxis);\n\n// EXTERNAL MODULE: external {\"amd\":[\"highcharts/highcharts\",\"SeriesRegistry\"],\"commonjs\":[\"highcharts\",\"SeriesRegistry\"],\"commonjs2\":[\"highcharts\",\"SeriesRegistry\"],\"root\":[\"Highcharts\",\"SeriesRegistry\"]}\nvar highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_ = __webpack_require__(512);\nvar highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default = /*#__PURE__*/__webpack_require__.n(highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_);\n;// ./code/es5/es-modules/Extensions/DataGrouping/DataGroupingSeriesComposition.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\n\n\n\n\nvar seriesProto = (highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default()).series.prototype;\n\nvar DataGroupingSeriesComposition_addEvent = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).addEvent, defined = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).defined, error = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).error, DataGroupingSeriesComposition_extend = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).extend, DataGroupingSeriesComposition_isNumber = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).isNumber, DataGroupingSeriesComposition_merge = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).merge, DataGroupingSeriesComposition_pick = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).pick, splat = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).splat;\n/* *\n *\n *  Constants\n *\n * */\nvar baseGeneratePoints = seriesProto.generatePoints;\n/* *\n *\n *  Functions\n *\n * */\n/**\n * @private\n */\nfunction adjustExtremes(xAxis, groupedXData) {\n    // Make sure the X axis extends to show the first group (#2533)\n    // But only for visible series (#5493, #6393)\n    if (defined(groupedXData[0]) &&\n        DataGroupingSeriesComposition_isNumber(xAxis.min) &&\n        DataGroupingSeriesComposition_isNumber(xAxis.dataMin) &&\n        groupedXData[0] < xAxis.min) {\n        if ((!defined(xAxis.options.min) &&\n            xAxis.min <= xAxis.dataMin) ||\n            xAxis.min === xAxis.dataMin) {\n            xAxis.min = Math.min(groupedXData[0], xAxis.min);\n        }\n        xAxis.dataMin = Math.min(groupedXData[0], xAxis.dataMin);\n    }\n    // When the last anchor set, change the extremes that\n    // the last point is visible (#12455).\n    if (defined(groupedXData[groupedXData.length - 1]) &&\n        DataGroupingSeriesComposition_isNumber(xAxis.max) &&\n        DataGroupingSeriesComposition_isNumber(xAxis.dataMax) &&\n        groupedXData[groupedXData.length - 1] > xAxis.max) {\n        if ((!defined(xAxis.options.max) &&\n            DataGroupingSeriesComposition_isNumber(xAxis.dataMax) &&\n            xAxis.max >= xAxis.dataMax) || xAxis.max === xAxis.dataMax) {\n            xAxis.max = Math.max(groupedXData[groupedXData.length - 1], xAxis.max);\n        }\n        xAxis.dataMax = Math.max(groupedXData[groupedXData.length - 1], xAxis.dataMax);\n    }\n}\n/**\n * @private\n */\nfunction anchorPoints(series, groupedXData, xMax) {\n    var options = series.options,\n        dataGroupingOptions = options.dataGrouping,\n        totalRange = (series.currentDataGrouping && series.currentDataGrouping.gapSize),\n        xData = series.getColumn('x');\n    if (!(dataGroupingOptions &&\n        xData.length &&\n        totalRange &&\n        series.groupMap)) {\n        return;\n    }\n    var groupedDataLastIndex = groupedXData.length - 1,\n        anchor = dataGroupingOptions.anchor,\n        firstAnchor = dataGroupingOptions.firstAnchor,\n        lastAnchor = dataGroupingOptions.lastAnchor;\n    var anchorIndexIterator = groupedXData.length - 1,\n        anchorFirstIndex = 0;\n    // Change the first point position, but only when it is\n    // the first point in the data set not in the current zoom.\n    if (firstAnchor && xData[0] >= groupedXData[0]) {\n        anchorFirstIndex++;\n        var groupStart = series.groupMap[0].start,\n            groupLength = series.groupMap[0].length;\n        var firstGroupEnd = void 0;\n        if (DataGroupingSeriesComposition_isNumber(groupStart) && DataGroupingSeriesComposition_isNumber(groupLength)) {\n            firstGroupEnd = groupStart + (groupLength - 1);\n        }\n        groupedXData[0] = {\n            start: groupedXData[0],\n            middle: groupedXData[0] + 0.5 * totalRange,\n            end: groupedXData[0] + totalRange,\n            firstPoint: xData[0],\n            lastPoint: firstGroupEnd && xData[firstGroupEnd]\n        }[firstAnchor];\n    }\n    // Change the last point position but only when it is\n    // the last point in the data set not in the current zoom,\n    // or if it is not the 1st point simultaneously.\n    if (groupedDataLastIndex > 0 &&\n        lastAnchor &&\n        totalRange &&\n        groupedXData[groupedDataLastIndex] >= xMax - totalRange) {\n        anchorIndexIterator--;\n        var lastGroupStart = series.groupMap[series.groupMap.length - 1].start;\n        groupedXData[groupedDataLastIndex] = {\n            start: groupedXData[groupedDataLastIndex],\n            middle: groupedXData[groupedDataLastIndex] + 0.5 * totalRange,\n            end: groupedXData[groupedDataLastIndex] + totalRange,\n            firstPoint: lastGroupStart && xData[lastGroupStart],\n            lastPoint: xData[xData.length - 1]\n        }[lastAnchor];\n    }\n    if (anchor && anchor !== 'start') {\n        var shiftInterval = (totalRange *\n                { middle: 0.5,\n            end: 1 }[anchor]);\n        // Anchor the rest of the points apart from the ones, that were\n        // previously moved.\n        while (anchorIndexIterator >= anchorFirstIndex) {\n            groupedXData[anchorIndexIterator] += shiftInterval;\n            anchorIndexIterator--;\n        }\n    }\n}\n/**\n * For the processed data, calculate the grouped data if needed.\n *\n * @private\n * @function Highcharts.Series#applyGrouping\n */\nfunction DataGroupingSeriesComposition_applyGrouping(hasExtremesChanged) {\n    var series = this,\n        chart = series.chart,\n        options = series.options,\n        dataGroupingOptions = options.dataGrouping,\n        groupingEnabled = series.allowDG !== false && dataGroupingOptions &&\n            DataGroupingSeriesComposition_pick(dataGroupingOptions.enabled,\n        chart.options.isStock),\n        reserveSpace = series.reserveSpace(),\n        lastDataGrouping = this.currentDataGrouping;\n    var currentDataGrouping,\n        croppedData,\n        revertRequireSorting = false;\n    // Data needs to be sorted for dataGrouping\n    if (groupingEnabled && !series.requireSorting) {\n        series.requireSorting = revertRequireSorting = true;\n    }\n    // Skip if skipDataGrouping method returns false or if grouping is disabled\n    // (in that order).\n    var skip = skipDataGrouping(series,\n        hasExtremesChanged) === false || !groupingEnabled;\n    // Revert original requireSorting value if changed\n    if (revertRequireSorting) {\n        series.requireSorting = false;\n    }\n    if (skip) {\n        return;\n    }\n    series.destroyGroupedData();\n    var table = dataGroupingOptions.groupAll ?\n            series.dataTable :\n            series.dataTable.modified || series.dataTable,\n        processedXData = series.getColumn('x', !dataGroupingOptions.groupAll),\n        xData = processedXData,\n        plotSizeX = chart.plotSizeX,\n        xAxis = series.xAxis,\n        extremes = xAxis.getExtremes(),\n        ordinal = xAxis.options.ordinal,\n        groupPixelWidth = series.groupPixelWidth;\n    var i,\n        hasGroupedData;\n    // Execute grouping if the amount of points is greater than the limit\n    // defined in groupPixelWidth\n    if (groupPixelWidth &&\n        xData &&\n        table.rowCount &&\n        plotSizeX &&\n        DataGroupingSeriesComposition_isNumber(extremes.min)) {\n        hasGroupedData = true;\n        // Force recreation of point instances in series.translate, #5699\n        series.isDirty = true;\n        series.points = null; // #6709\n        var xMin = extremes.min,\n            xMax = extremes.max,\n            groupIntervalFactor = (ordinal &&\n                xAxis.ordinal &&\n                xAxis.ordinal.getGroupIntervalFactor(xMin,\n            xMax,\n            series)) || 1,\n            interval = (groupPixelWidth * (xMax - xMin) / plotSizeX) *\n                groupIntervalFactor,\n            groupPositions = xAxis.getTimeTicks(Axis_DateTimeAxis.Additions.prototype.normalizeTimeTickInterval(interval,\n            dataGroupingOptions.units ||\n                DataGrouping_DataGroupingDefaults.units), \n            // Processed data may extend beyond axis (#4907)\n            Math.min(xMin,\n            xData[0]),\n            Math.max(xMax,\n            xData[xData.length - 1]),\n            xAxis.options.startOfWeek,\n            processedXData,\n            series.closestPointRange),\n            groupedData = seriesProto.groupData.apply(series,\n            [\n                table,\n                groupPositions,\n                dataGroupingOptions.approximation\n            ]);\n        var modified = groupedData.modified,\n            groupedXData = modified.getColumn('x',\n            true),\n            gapSize = 0;\n        // The smoothed option is deprecated, instead, there is a fallback\n        // to the new anchoring mechanism. #12455.\n        if ((dataGroupingOptions === null || dataGroupingOptions === void 0 ? void 0 : dataGroupingOptions.smoothed) &&\n            modified.rowCount) {\n            dataGroupingOptions.firstAnchor = 'firstPoint';\n            dataGroupingOptions.anchor = 'middle';\n            dataGroupingOptions.lastAnchor = 'lastPoint';\n            error(32, false, chart, {\n                'dataGrouping.smoothed': 'use dataGrouping.anchor'\n            });\n        }\n        // Record what data grouping values were used\n        for (i = 1; i < groupPositions.length; i++) {\n            // The grouped gapSize needs to be the largest distance between\n            // the group to capture varying group sizes like months or DST\n            // crossing (#10000). Also check that the gap is not at the\n            // start of a segment.\n            if (!groupPositions.info.segmentStarts ||\n                groupPositions.info.segmentStarts.indexOf(i) === -1) {\n                gapSize = Math.max(groupPositions[i] - groupPositions[i - 1], gapSize);\n            }\n        }\n        currentDataGrouping = groupPositions.info;\n        currentDataGrouping.gapSize = gapSize;\n        series.closestPointRange = groupPositions.info.totalRange;\n        series.groupMap = groupedData.groupMap;\n        series.currentDataGrouping = currentDataGrouping;\n        anchorPoints(series, groupedXData || [], xMax);\n        if (reserveSpace && groupedXData) {\n            adjustExtremes(xAxis, groupedXData);\n        }\n        // We calculated all group positions but we should render only the ones\n        // within the visible range\n        if (dataGroupingOptions.groupAll) {\n            // Keep the reference to all grouped points for further calculation,\n            // used in Heikin-Ashi and hollow candlestick series.\n            series.allGroupedTable = modified;\n            croppedData = series.cropData(modified, xAxis.min || 0, xAxis.max || 0);\n            modified = croppedData.modified;\n            groupedXData = modified.getColumn('x');\n            series.cropStart = croppedData.start; // #15005\n        }\n        // Set the modified table\n        series.dataTable.modified = modified;\n    }\n    else {\n        series.groupMap = void 0;\n        series.currentDataGrouping = void 0;\n    }\n    series.hasGroupedData = hasGroupedData;\n    series.preventGraphAnimation =\n        (lastDataGrouping && lastDataGrouping.totalRange) !==\n            (currentDataGrouping && currentDataGrouping.totalRange);\n}\n/**\n * @private\n */\nfunction DataGroupingSeriesComposition_compose(SeriesClass) {\n    var seriesProto = SeriesClass.prototype;\n    if (!seriesProto.applyGrouping) {\n        var PointClass = SeriesClass.prototype.pointClass;\n        // Override point prototype to throw a warning when trying to update\n        // grouped points.\n        DataGroupingSeriesComposition_addEvent(PointClass, 'update', function () {\n            if (this.dataGroup) {\n                error(24, false, this.series.chart);\n                return false;\n            }\n        });\n        DataGroupingSeriesComposition_addEvent(SeriesClass, 'afterSetOptions', onAfterSetOptions);\n        DataGroupingSeriesComposition_addEvent(SeriesClass, 'destroy', destroyGroupedData);\n        DataGroupingSeriesComposition_extend(seriesProto, {\n            applyGrouping: DataGroupingSeriesComposition_applyGrouping,\n            destroyGroupedData: destroyGroupedData,\n            generatePoints: generatePoints,\n            getDGApproximation: getDGApproximation,\n            groupData: groupData\n        });\n    }\n}\n/**\n * Destroy the grouped data points. #622, #740\n * @private\n */\nfunction destroyGroupedData() {\n    // Clear previous groups\n    if (this.groupedData) {\n        this.groupedData.forEach(function (point, i) {\n            if (point) {\n                this.groupedData[i] = point.destroy ?\n                    point.destroy() : null;\n            }\n        }, this);\n        // Clears all:\n        // - `this.groupedData`\n        // - `this.points`\n        // - `preserve` object in series.update()\n        this.groupedData.length = 0;\n        delete this.allGroupedTable;\n    }\n}\n/**\n * Override the generatePoints method by adding a reference to grouped data\n * @private\n */\nfunction generatePoints() {\n    baseGeneratePoints.apply(this);\n    // Record grouped data in order to let it be destroyed the next time\n    // processData runs\n    this.destroyGroupedData(); // #622\n    this.groupedData = this.hasGroupedData ? this.points : null;\n}\n/**\n * Set default approximations to the prototypes if present. Properties are\n * inherited down. Can be overridden for individual series types.\n * @private\n */\nfunction getDGApproximation() {\n    if (this.is('arearange')) {\n        return 'range';\n    }\n    if (this.is('ohlc')) {\n        return 'ohlc';\n    }\n    if (this.is('hlc')) {\n        return 'hlc';\n    }\n    if (\n    // #18974, default approximation for cumulative\n    // should be `sum` when `dataGrouping` is enabled\n    this.is('column') ||\n        this.options.cumulative) {\n        return 'sum';\n    }\n    return 'average';\n}\n/**\n * Highcharts Stock only. Takes parallel arrays of x and y data and groups the\n * data into intervals defined by groupPositions, a collection of starting x\n * values for each group.\n *\n * @product highstock\n *\n * @function Highcharts.Series#groupData\n * @param {Highcharts.DataTable} table\n *        The series data table.\n * @param {Array<number>} groupPositions\n *        Group positions.\n * @param {string|Function} [approximation]\n *        Approximation to use.\n * @return {Highcharts.DataGroupingResultObject}\n *         Mapped groups.\n */\nfunction groupData(table, groupPositions, approximation) {\n    var xData = table.getColumn('x', true) || [], yData = table.getColumn('y', true), series = this, data = series.data, dataOptions = series.options && series.options.data, groupedXData = [], modified = new Data_DataTableCore(), groupMap = [], dataLength = table.rowCount, \n        // When grouping the fake extended axis for panning, we don't need to\n        // consider y\n        handleYData = !!yData, values = [], pointArrayMap = series.pointArrayMap, pointArrayMapLength = pointArrayMap && pointArrayMap.length, extendedPointArrayMap = ['x'].concat(pointArrayMap || ['y']), \n        // Data columns to be applied to the modified data table at the end\n        valueColumns = (pointArrayMap || ['y']).map(function () { return []; }), groupAll = (this.options.dataGrouping &&\n            this.options.dataGrouping.groupAll);\n    var pointX,\n        pointY,\n        groupedY,\n        pos = 0,\n        start = 0;\n    var approximationFn = (typeof approximation === 'function' ?\n            approximation :\n            approximation && DataGrouping_ApproximationRegistry[approximation] ?\n                DataGrouping_ApproximationRegistry[approximation] :\n                DataGrouping_ApproximationRegistry[(series.getDGApproximation && series.getDGApproximation() ||\n                    'average')]);\n    // Calculate values array size from pointArrayMap length\n    if (pointArrayMapLength) {\n        var len = pointArrayMap.length;\n        while (len--) {\n            values.push([]);\n        }\n    }\n    else {\n        values.push([]);\n    }\n    var valuesLen = pointArrayMapLength || 1;\n    for (var i = 0; i <= dataLength; i++) {\n        // Start with the first point within the X axis range (#2696)\n        if (xData[i] < groupPositions[0]) {\n            continue; // With next point\n        }\n        // When a new group is entered, summarize and initialize\n        // the previous group\n        while ((typeof groupPositions[pos + 1] !== 'undefined' &&\n            xData[i] >= groupPositions[pos + 1]) ||\n            i === dataLength) { // Get the last group\n            // get group x and y\n            pointX = groupPositions[pos];\n            series.dataGroupInfo = {\n                start: groupAll ? start : (series.cropStart + start),\n                length: values[0].length,\n                groupStart: pointX\n            };\n            groupedY = approximationFn.apply(series, values);\n            // By default, let options of the first grouped point be passed over\n            // to the grouped point. This allows preserving properties like\n            // `name` and `color` or custom properties. Implementers can\n            // override this from the approximation function, where they can\n            // write custom options to `this.dataGroupInfo.options`.\n            if (series.pointClass && !defined(series.dataGroupInfo.options)) {\n                // Convert numbers and arrays into objects\n                series.dataGroupInfo.options = DataGroupingSeriesComposition_merge(series.pointClass.prototype\n                    .optionsToObject.call({ series: series }, series.options.data[series.cropStart + start]));\n                // Make sure the raw data (x, y, open, high etc) is not copied\n                // over and overwriting approximated data.\n                extendedPointArrayMap.forEach(function (key) {\n                    delete series.dataGroupInfo.options[key];\n                });\n            }\n            // Push the grouped data\n            if (typeof groupedY !== 'undefined') {\n                groupedXData.push(pointX);\n                // Push the grouped values to the parallel columns\n                var groupedValuesArr = splat(groupedY);\n                for (var j = 0; j < groupedValuesArr.length; j++) {\n                    valueColumns[j].push(groupedValuesArr[j]);\n                }\n                groupMap.push(series.dataGroupInfo);\n            }\n            // Reset the aggregate arrays\n            start = i;\n            for (var j = 0; j < valuesLen; j++) {\n                values[j].length = 0; // Faster than values[j] = []\n                values[j].hasNulls = false;\n            }\n            // Advance on the group positions\n            pos += 1;\n            // Don't loop beyond the last group\n            if (i === dataLength) {\n                break;\n            }\n        }\n        // Break out\n        if (i === dataLength) {\n            break;\n        }\n        // For each raw data point, push it to an array that contains all values\n        // for this specific group\n        if (pointArrayMap) {\n            var index = groupAll ? i : series.cropStart + i,\n                point = (data && data[index]) ||\n                    series.pointClass.prototype.applyOptions.apply({\n                        series: series\n                    },\n                [dataOptions[index]]);\n            var val = void 0;\n            for (var j = 0; j < pointArrayMapLength; j++) {\n                val = point[pointArrayMap[j]];\n                if (DataGroupingSeriesComposition_isNumber(val)) {\n                    values[j].push(val);\n                }\n                else if (val === null) {\n                    values[j].hasNulls = true;\n                }\n            }\n        }\n        else {\n            pointY = handleYData ? yData[i] : null;\n            if (DataGroupingSeriesComposition_isNumber(pointY)) {\n                values[0].push(pointY);\n            }\n            else if (pointY === null) {\n                values[0].hasNulls = true;\n            }\n        }\n    }\n    var columns = {\n            x: groupedXData\n        };\n    (pointArrayMap || ['y']).forEach(function (key, i) {\n        columns[key] = valueColumns[i];\n    });\n    modified.setColumns(columns);\n    return {\n        groupMap: groupMap,\n        modified: modified\n    };\n}\n/**\n * Handle default options for data grouping. This must be set at runtime because\n * some series types are defined after this.\n * @private\n */\nfunction onAfterSetOptions(e) {\n    var options = e.options,\n        type = this.type,\n        plotOptions = this.chart.options.plotOptions, \n        // External series, for example technical indicators should also inherit\n        // commonOptions which are not available outside this module\n        baseOptions = (this.useCommonDataGrouping &&\n            DataGrouping_DataGroupingDefaults.common),\n        seriesSpecific = DataGrouping_DataGroupingDefaults.seriesSpecific;\n    var defaultOptions = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).defaultOptions.plotOptions[type].dataGrouping;\n    if (plotOptions && (seriesSpecific[type] || baseOptions)) { // #1284\n        var rangeSelector = this.chart.rangeSelector;\n        if (!defaultOptions) {\n            defaultOptions = DataGroupingSeriesComposition_merge(DataGrouping_DataGroupingDefaults.common, seriesSpecific[type]);\n        }\n        options.dataGrouping = DataGroupingSeriesComposition_merge(baseOptions, defaultOptions, plotOptions.series && plotOptions.series.dataGrouping, // #1228\n        // Set by the StockChart constructor:\n        plotOptions[type].dataGrouping, this.userOptions.dataGrouping, !options.isInternal &&\n            rangeSelector &&\n            DataGroupingSeriesComposition_isNumber(rangeSelector.selected) &&\n            rangeSelector.buttonOptions[rangeSelector.selected].dataGrouping);\n    }\n}\n/**\n * @private\n */\nfunction skipDataGrouping(series, force) {\n    return !(series.isCartesian &&\n        !series.isDirty &&\n        !series.xAxis.isDirty &&\n        !series.yAxis.isDirty &&\n        !force);\n}\n/* *\n *\n *  Default Export\n *\n * */\nvar DataGroupingSeriesComposition = {\n    compose: DataGroupingSeriesComposition_compose,\n    groupData: groupData\n};\n/* harmony default export */ var DataGrouping_DataGroupingSeriesComposition = (DataGroupingSeriesComposition);\n\n// EXTERNAL MODULE: external {\"amd\":[\"highcharts/highcharts\",\"Templating\"],\"commonjs\":[\"highcharts\",\"Templating\"],\"commonjs2\":[\"highcharts\",\"Templating\"],\"root\":[\"Highcharts\",\"Templating\"]}\nvar highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_ = __webpack_require__(984);\nvar highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_default = /*#__PURE__*/__webpack_require__.n(highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_);\n;// ./code/es5/es-modules/Extensions/DataGrouping/DataGrouping.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\n\n\nvar format = (highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_default()).format;\n\nvar composed = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).composed;\n\nvar DataGrouping_addEvent = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).addEvent, DataGrouping_extend = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).extend, DataGrouping_isNumber = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).isNumber, DataGrouping_pick = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).pick, pushUnique = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()).pushUnique;\n/* *\n *\n *  Functions\n *\n * */\n/**\n * @private\n */\nfunction DataGrouping_compose(AxisClass, SeriesClass, TooltipClass) {\n    DataGrouping_DataGroupingAxisComposition.compose(AxisClass);\n    DataGrouping_DataGroupingSeriesComposition.compose(SeriesClass);\n    if (TooltipClass &&\n        pushUnique(composed, 'DataGrouping')) {\n        DataGrouping_addEvent(TooltipClass, 'headerFormatter', onTooltipHeaderFormatter);\n    }\n}\n/**\n * Extend the original method, make the tooltip's header reflect the grouped\n * range.\n * @private\n */\nfunction onTooltipHeaderFormatter(e) {\n    var _a;\n    var chart = this.chart,\n        time = chart.time,\n        point = e.point,\n        series = point.series,\n        options = series.options,\n        tooltipOptions = series.tooltipOptions,\n        dataGroupingOptions = options.dataGrouping,\n        xAxis = series.xAxis;\n    var xDateFormat = tooltipOptions.xDateFormat || '', xDateFormatEnd, currentDataGrouping, dateTimeLabelFormats, labelFormats, formattedKey, formatString = tooltipOptions[e.isFooter ? 'footerFormat' : 'headerFormat'];\n    // Apply only to grouped series\n    if (xAxis &&\n        xAxis.options.type === 'datetime' &&\n        dataGroupingOptions &&\n        DataGrouping_isNumber(point.key)) {\n        // Set variables\n        currentDataGrouping = series.currentDataGrouping;\n        dateTimeLabelFormats = dataGroupingOptions.dateTimeLabelFormats ||\n            // Fallback to commonOptions (#9693)\n            DataGrouping_DataGroupingDefaults.common.dateTimeLabelFormats;\n        // If we have grouped data, use the grouping information to get the\n        // right format\n        if (currentDataGrouping) {\n            labelFormats = dateTimeLabelFormats[currentDataGrouping.unitName];\n            if (currentDataGrouping.count === 1) {\n                xDateFormat = labelFormats[0];\n            }\n            else {\n                xDateFormat = labelFormats[1];\n                xDateFormatEnd = labelFormats[2];\n            }\n            // If not grouped, and we don't have set the xDateFormat option, get the\n            // best fit, so if the least distance between points is one minute, show\n            // it, but if the least distance is one day, skip hours and minutes etc.\n        }\n        else if (!xDateFormat && dateTimeLabelFormats && xAxis.dateTime) {\n            xDateFormat = xAxis.dateTime.getXDateFormat(point.x, tooltipOptions.dateTimeLabelFormats);\n        }\n        var groupStart = DataGrouping_pick((_a = series.groupMap) === null || _a === void 0 ? void 0 : _a[point.index].groupStart,\n            point.key),\n            groupEnd = groupStart + ((currentDataGrouping === null || currentDataGrouping === void 0 ? void 0 : currentDataGrouping.totalRange) || 0) - 1;\n        formattedKey = time.dateFormat(xDateFormat, groupStart);\n        if (xDateFormatEnd) {\n            formattedKey += time.dateFormat(xDateFormatEnd, groupEnd);\n        }\n        // Replace default header style with class name\n        if (series.chart.styledMode) {\n            formatString = this.styledModeFormat(formatString);\n        }\n        // Return the replaced format\n        e.text = format(formatString, {\n            point: DataGrouping_extend(point, { key: formattedKey }),\n            series: series\n        }, chart);\n        e.preventDefault();\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\nvar DataGroupingComposition = {\n    compose: DataGrouping_compose,\n    groupData: DataGrouping_DataGroupingSeriesComposition.groupData\n};\n/* harmony default export */ var DataGrouping = (DataGroupingComposition);\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * @typedef {\"average\"|\"averages\"|\"open\"|\"high\"|\"low\"|\"close\"|\"sum\"} Highcharts.DataGroupingApproximationValue\n */\n/**\n * The position of the point inside the group.\n *\n * @typedef    {\"start\"|\"middle\"|\"end\"} Highcharts.DataGroupingAnchor\n */\n/**\n * The position of the first or last point in the series inside the group.\n *\n * @typedef    {\"start\"|\"middle\"|\"end\"|\"firstPoint\"|\"lastPoint\"} Highcharts.DataGroupingAnchorExtremes\n */\n/**\n * Highcharts Stock only.\n *\n * @product highstock\n * @interface Highcharts.DataGroupingInfoObject\n */ /**\n* @name Highcharts.DataGroupingInfoObject#length\n* @type {number}\n*/ /**\n* @name Highcharts.DataGroupingInfoObject#options\n* @type {Highcharts.SeriesOptionsType|undefined}\n*/ /**\n* @name Highcharts.DataGroupingInfoObject#start\n* @type {number}\n*/\n/**\n * Highcharts Stock only.\n *\n * @product highstock\n * @interface Highcharts.DataGroupingResultObject\n */ /**\n* @name Highcharts.DataGroupingResultObject#groupedXData\n* @type {Array<number>}\n*/ /**\n* @name Highcharts.DataGroupingResultObject#groupedYData\n* @type {Array<(number|null|undefined)>|Array<Array<(number|null|undefined)>>}\n*/ /**\n* @name Highcharts.DataGroupingResultObject#groupMap\n* @type {Array<DataGroupingInfoObject>}\n*/\n/**\n * Highcharts Stock only. If a point object is created by data\n * grouping, it doesn't reflect actual points in the raw\n * data. In this case, the `dataGroup` property holds\n * information that points back to the raw data.\n *\n * - `dataGroup.start` is the index of the first raw data\n *   point in the group.\n *\n * - `dataGroup.length` is the amount of points in the\n *   group.\n *\n * @sample stock/members/point-datagroup\n *         Click to inspect raw data points\n *\n * @product highstock\n *\n * @name Highcharts.Point#dataGroup\n * @type {Highcharts.DataGroupingInfoObject|undefined}\n */\n(''); // Detach doclets above\n/* *\n *\n *  API Options\n *\n * */\n/**\n * Data grouping is the concept of sampling the data values into larger\n * blocks in order to ease readability and increase performance of the\n * JavaScript charts. Highcharts Stock by default applies data grouping when\n * the points become closer than a certain pixel value, determined by\n * the `groupPixelWidth` option.\n *\n * If data grouping is applied, the grouping information of grouped\n * points can be read from the [Point.dataGroup](\n * /class-reference/Highcharts.Point#dataGroup). If point options other than\n * the data itself are set, for example `name` or `color` or custom properties,\n * the grouping logic doesn't know how to group it. In this case the options of\n * the first point instance are copied over to the group point. This can be\n * altered through a custom `approximation` callback function.\n *\n * @declare   Highcharts.DataGroupingOptionsObject\n * @product   highstock\n * @requires  modules/stock\n * @apioption plotOptions.series.dataGrouping\n */\n/**\n * Specifies how the points should be located on the X axis inside the group.\n * Points that are extremes can be set separately. Available options:\n *\n * - `start` places the point at the beginning of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n *\n * - `middle` places the point in the middle of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n *\n * - `end` places the point at the end of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n *\n * @sample {highstock} stock/plotoptions/series-datagrouping-anchor\n *         Changing the point x-coordinate inside the group.\n *\n * @see [dataGrouping.firstAnchor](#plotOptions.series.dataGrouping.firstAnchor)\n * @see [dataGrouping.lastAnchor](#plotOptions.series.dataGrouping.lastAnchor)\n *\n * @type       {Highcharts.DataGroupingAnchor}\n * @since 9.1.0\n * @default    start\n * @apioption  plotOptions.series.dataGrouping.anchor\n */\n/**\n * The method of approximation inside a group. When for example 30 days\n * are grouped into one month, this determines what value should represent\n * the group. Possible values are \"average\", \"averages\", \"open\", \"high\",\n * \"low\", \"close\" and \"sum\". For OHLC and candlestick series the approximation\n * is \"ohlc\" by default, which finds the open, high, low and close values\n * within all the grouped data. For ranges, the approximation is \"range\",\n * which finds the low and high values. For multi-dimensional data,\n * like ranges and OHLC, \"averages\" will compute the average for each\n * dimension.\n *\n * Custom aggregate methods can be added by assigning a callback function\n * as the approximation. This function takes a numeric array as the\n * argument and should return a single numeric value or `null`. Note\n * that the numeric array will never contain null values, only true\n * numbers. Instead, if null values are present in the raw data, the\n * numeric array will have an `.hasNulls` property set to `true`. For\n * single-value data sets the data is available in the first argument\n * of the callback function. For OHLC data sets, all the open values\n * are in the first argument, all high values in the second etc.\n *\n * Since v4.2.7, grouping meta data is available in the approximation\n * callback from `this.dataGroupInfo`. It can be used to extract information\n * from the raw data.\n *\n * Defaults to `average` for line-type series, `sum` for columns, `range`\n * for range series, `hlc` for HLC, and `ohlc` for OHLC and candlestick.\n *\n * @sample {highstock} stock/plotoptions/series-datagrouping-approximation\n *         Approximation callback with custom data\n * @sample {highstock} stock/plotoptions/series-datagrouping-simple-approximation\n *         Simple approximation demo\n *\n * @type       {Highcharts.DataGroupingApproximationValue|Function}\n * @apioption  plotOptions.series.dataGrouping.approximation\n */\n/**\n * Datetime formats for the header of the tooltip in a stock chart.\n * The format can vary within a chart depending on the currently selected\n * time range and the current data grouping.\n *\n * The default formats are:\n * ```js\n * {\n *     millisecond: [\n *         '%A, %e %b, %H:%M:%S.%L', '%A, %e %b, %H:%M:%S.%L', '-%H:%M:%S.%L'\n *     ],\n *     second: ['%A, %e %b, %H:%M:%S', '%A, %e %b, %H:%M:%S', '-%H:%M:%S'],\n *     minute: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n *     hour: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n *     day: ['%A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n *     week: ['Week from %A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n *     month: ['%B %Y', '%B', '-%B %Y'],\n *     year: ['%Y', '%Y', '-%Y']\n * }\n * ```\n *\n * For each of these array definitions, the first item is the format\n * used when the active time span is one unit. For instance, if the\n * current data applies to one week, the first item of the week array\n * is used. The second and third items are used when the active time\n * span is more than two units. For instance, if the current data applies\n * to two weeks, the second and third item of the week array are used,\n *  and applied to the start and end date of the time span.\n *\n * @type      {Object}\n * @apioption plotOptions.series.dataGrouping.dateTimeLabelFormats\n */\n/**\n * Enable or disable data grouping.\n *\n * @type      {boolean}\n * @default   true\n * @apioption plotOptions.series.dataGrouping.enabled\n */\n/**\n * Specifies how the first grouped point is positioned on the xAxis.\n * If firstAnchor and/or lastAnchor are defined, then those options take\n * precedence over anchor for the first and/or last grouped points.\n * Available options:\n *\n * -`start` places the point at the beginning of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n *\n * -`middle` places the point in the middle of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n *\n * -`end` places the point at the end of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n *\n * -`firstPoint` the first point in the group\n * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n *\n * -`lastPoint` the last point in the group\n * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n *\n * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n *         Applying first and last anchor.\n *\n * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n *\n * @type       {Highcharts.DataGroupingAnchorExtremes}\n * @since 9.1.0\n * @default    start\n * @apioption  plotOptions.series.dataGrouping.firstAnchor\n */\n/**\n * When data grouping is forced, it runs no matter how small the intervals\n * are. This can be handy for example when the sum should be calculated\n * for values appearing at random times within each hour.\n *\n * @type      {boolean}\n * @default   false\n * @apioption plotOptions.series.dataGrouping.forced\n */\n/**\n * The approximate pixel width of each group. If for example a series\n * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n * is performed. If however the series contains so many points that\n * the spacing is less than the groupPixelWidth, Highcharts will try\n * to group it into appropriate groups so that each is more or less\n * two pixels wide. If multiple series with different group pixel widths\n * are drawn on the same x axis, all series will take the greatest width.\n * For example, line series have 2px default group width, while column\n * series have 10px. If combined, both the line and the column will\n * have 10px by default.\n *\n * @type      {number}\n * @default   2\n * @apioption plotOptions.series.dataGrouping.groupPixelWidth\n */\n/**\n * By default only points within the visible range are grouped. Enabling this\n * option will force data grouping to calculate all grouped points for a given\n * dataset. That option prevents for example a column series from calculating\n * a grouped point partially. The effect is similar to\n * [Series.getExtremesFromAll](#plotOptions.series.getExtremesFromAll) but does\n * not affect yAxis extremes.\n *\n * @sample {highstock} stock/plotoptions/series-datagrouping-groupall/\n *         Two series with the same data but different groupAll setting\n *\n * @type      {boolean}\n * @default   false\n * @since     6.1.0\n * @apioption plotOptions.series.dataGrouping.groupAll\n */\n/**\n * Specifies how the last grouped point is positioned on the xAxis.\n * If firstAnchor and/or lastAnchor are defined, then those options take\n * precedence over anchor for the first and/or last grouped points.\n * Available options:\n *\n * -`start` places the point at the beginning of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n *\n * -`middle` places the point in the middle of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n *\n * -`end` places the point at the end of the group\n * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n *\n * -`firstPoint` the first point in the group\n * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n *\n * -`lastPoint` the last point in the group\n * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n *\n * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n *         Applying first and last anchor.\n *\n * @sample {highstock} stock/plotoptions/series-datagrouping-last-anchor\n *         Applying the last anchor in the chart with live data.\n *\n * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n *\n * @type       {Highcharts.DataGroupingAnchorExtremes}\n * @since 9.1.0\n * @default    start\n * @apioption  plotOptions.series.dataGrouping.lastAnchor\n */\n/**\n * Normally, a group is indexed by the start of that group, so for example\n * when 30 daily values are grouped into one month, that month's x value\n * will be the 1st of the month. This apparently shifts the data to\n * the left. When the smoothed option is true, this is compensated for.\n * The data is shifted to the middle of the group, and min and max\n * values are preserved. Internally, this is used in the Navigator series.\n *\n * @type      {boolean}\n * @default   false\n * @deprecated\n * @apioption plotOptions.series.dataGrouping.smoothed\n */\n/**\n * An array determining what time intervals the data is allowed to be\n * grouped to. Each array item is an array where the first value is\n * the time unit and the second value another array of allowed multiples.\n *\n * Defaults to:\n * ```js\n * units: [[\n *     'millisecond', // unit name\n *     [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n * ], [\n *     'second',\n *     [1, 2, 5, 10, 15, 30]\n * ], [\n *     'minute',\n *     [1, 2, 5, 10, 15, 30]\n * ], [\n *     'hour',\n *     [1, 2, 3, 4, 6, 8, 12]\n * ], [\n *     'day',\n *     [1]\n * ], [\n *     'week',\n *     [1]\n * ], [\n *     'month',\n *     [1, 3, 6]\n * ], [\n *     'year',\n *     null\n * ]]\n * ```\n *\n * @type      {Array<Array<string,(Array<number>|null)>>}\n * @apioption plotOptions.series.dataGrouping.units\n */\n/**\n * The approximate pixel width of each group. If for example a series\n * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n * is performed. If however the series contains so many points that\n * the spacing is less than the groupPixelWidth, Highcharts will try\n * to group it into appropriate groups so that each is more or less\n * two pixels wide. Defaults to `10`.\n *\n * @sample {highstock} stock/plotoptions/series-datagrouping-grouppixelwidth/\n *         Two series with the same data density but different groupPixelWidth\n *\n * @type      {number}\n * @default   10\n * @apioption plotOptions.column.dataGrouping.groupPixelWidth\n */\n''; // Required by JSDoc parsing\n\n;// ./code/es5/es-modules/masters/modules/datagrouping.src.js\n\n\n\n\n\n\nvar G = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\nG.dataGrouping = G.dataGrouping || {};\nG.dataGrouping.approximationDefaults = (G.dataGrouping.approximationDefaults ||\n    DataGrouping_ApproximationDefaults);\nG.dataGrouping.approximations = (G.dataGrouping.approximations ||\n    DataGrouping_ApproximationRegistry);\nDataGrouping.compose(G.Axis, G.Series, G.Tooltip);\n/* harmony default export */ var datagrouping_src = ((highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()));\n\n__webpack_exports__ = __webpack_exports__[\"default\"];\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});"],"names":["root","factory","exports","module","require","define","amd","__WEBPACK_EXTERNAL_MODULE__944__","__WEBPACK_EXTERNAL_MODULE__512__","__WEBPACK_EXTERNAL_MODULE__984__","AxisConstructor","DateTimeAxis","__webpack_modules__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","__webpack_exports__","datagrouping_src","highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_","highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default","DataGrouping_ApproximationRegistry","arrayMax","arrayMin","correctFloat","extend","isNumber","average","arr","len","length","ret","sum","hasNulls","ApproximationDefaults","averages","forEach","arguments","push","close","high","hlc","low","ohlc","open","range","DataGrouping_DataGroupingDefaults","common","groupPixelWidth","dateTimeLabelFormats","millisecond","second","minute","hour","day","week","month","year","seriesSpecific","line","spline","area","areaspline","arearange","column","columnrange","candlestick","heikinashi","units","addEvent","DataGroupingAxisComposition_extend","merge","pick","applyGrouping","e","axis","series","getGroupPixelWidth","hasProcessed","hasExtremesChanged","dataLength","dgOptions","i","doGrouping","options","dataGrouping","Math","max","dataTable","modified","rowCount","chart","plotSizeX","forced","onAfterSetScale","setDataGrouping","redraw","update","seriesOptions","ordinal","slope","AxisClass","axisProto","fireEvent","isArray","objectEach","uniqueKey","DataTableCore","_this","autoId","id","columns","versionTag","columnName","slice","applyRowCount","getColumn","asReference","getColumns","columnNames","keys","reduce","getRow","rowIndex","map","_a","setColumn","eventDetail","setColumns","silent","setRow","row","insert","indexRowCount","cellValue","addColumns","Array","splice","DateTimeAxis_addEvent","getMagnitude","normalizeTickInterval","timeUnits","getTimeTicks","time","apply","onAfterSetType","type","dateTime","Additions","compose","keepProps","includes","normalizeTimeTickInterval","tickInterval","unitsOption","unit","interval","multiples","count","unitRange","unitName","getXDateFormat","x","closestPointRange","getDateFormat","startOfWeek","resolveDTLFormat","main","Axis_DateTimeAxis","highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_","seriesProto","highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default","DataGroupingSeriesComposition_addEvent","defined","error","DataGroupingSeriesComposition_extend","DataGroupingSeriesComposition_isNumber","DataGroupingSeriesComposition_merge","DataGroupingSeriesComposition_pick","splat","baseGeneratePoints","generatePoints","DataGroupingSeriesComposition_applyGrouping","hasGroupedData","currentDataGrouping","croppedData","dataGroupingOptions","groupingEnabled","allowDG","enabled","isStock","reserveSpace","lastDataGrouping","revertRequireSorting","requireSorting","skip","skipDataGrouping","isCartesian","isDirty","xAxis","yAxis","destroyGroupedData","table","groupAll","processedXData","extremes","getExtremes","min","points","groupedXData","xMin","xMax","groupIntervalFactor","getGroupIntervalFactor","groupPositions","xData","groupedData","groupData","approximation","gapSize","smoothed","firstAnchor","anchor","lastAnchor","info","segmentStarts","indexOf","totalRange","groupMap","anchorPoints","groupedDataLastIndex","anchorIndexIterator","anchorFirstIndex","groupStart","start","groupLength","firstGroupEnd","middle","end","firstPoint","lastPoint","lastGroupStart","shiftInterval","dataMin","dataMax","allGroupedTable","cropData","cropStart","preventGraphAnimation","point","destroy","getDGApproximation","is","cumulative","pointX","pointY","groupedY","yData","data","dataOptions","handleYData","values","pointArrayMap","pointArrayMapLength","extendedPointArrayMap","concat","valueColumns","pos","approximationFn","valuesLen","dataGroupInfo","pointClass","optionsToObject","groupedValuesArr","j","index","applyOptions","val","onAfterSetOptions","plotOptions","baseOptions","useCommonDataGrouping","defaultOptions","rangeSelector","userOptions","isInternal","selected","buttonOptions","SeriesClass","dataGroup","highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_","format","highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_default","composed","DataGrouping_addEvent","DataGrouping_extend","DataGrouping_isNumber","DataGrouping_pick","pushUnique","onTooltipHeaderFormatter","xDateFormatEnd","labelFormats","formattedKey","tooltipOptions","xDateFormat","formatString","isFooter","groupEnd","dateFormat","styledMode","styledModeFormat","text","preventDefault","G","approximationDefaults","approximations","DataGrouping","TooltipClass","DataGrouping_DataGroupingAxisComposition","DataGrouping_DataGroupingSeriesComposition","Axis","Series","Tooltip"],"mappings":"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"}